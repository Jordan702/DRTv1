DRTrade.sol: A Trustless DEX for DRTv1 and WETH
Abstract
DRTrade.sol is a decentralized exchange (DEX) protocol on Ethereum that enables trustless swapping between the Ethereum Decentralized Resource Token (DRTv1) and Wrapped Ether (WETH) via an automated market maker (AMM). Using the classic constant product formula (x · y = k) pioneered by Uniswap
docs.uniswap.org
medium.com
, DRTrade.sol maintains a liquidity pool of DRTv1 and WETH reserves. The DRTv1 token is an infinite-supply, ERC-20 asset minted through an off-chain AI system; WETH is the standard ERC-20 wrapped version of ETH
coinmarketcap.com
ethereum.org
. The smart contract (address 0xD0DC7f8935A661010D56A470eA81572a4a84EED4) implements swap logic that preserves the reserve product invariant, ensuring any trade’s price impact is defined by the pool’s liquidity. An open-source “trustless AI” backend (via drtradeController.js, drtradeRoute.js, etc.) oversees minting and trading, enforcing slippage and liquidity safeguards. This whitepaper details the protocol’s architecture, token specifications, AMM mechanics, and trustless AI controls on Ethereum.
Introduction
DRTrade.sol operates on the Ethereum blockchain, a decentralized platform for smart contracts and dApps
nansen.ai
docs.uniswap.org
. Ethereum allows interoperable ERC-20 tokens
docs.uniswap.org
ethereum.org
 and incentivizes open-source, trust-minimized protocols
docs.uniswap.org
bcbgroup.com
. In this spirit, DRTrade.sol is entirely open-source and permissionless: no central authority can arbitrarily block trades or mint tokens. It supports a single trading pair, DRTv1/WETH, using a Uniswap-like AMM model where liquidity providers deposit equal values of each token into the pool
docs.uniswap.org
. Trades execute against the pool’s reserves and obey the constant-product rule (x·y=k)
docs.uniswap.org
medium.com
. Crucially, DRTrade.sol adds a novel “trustless AI” layer: an off-chain controller that algorithmically governs minting and trade execution to prevent high-slippage or liquidity-draining transactions. By running this logic in open-source code (drtradeController.js, drtradeRoute.js, etc.), participants can verify that trades will only execute under safe conditions. The protocol thus combines Ethereum’s decentralized guarantees with AI-driven safety controls, ensuring robust, fair, and transparent swapping.
The DRTv1 Token
DRTv1 (Ethereum Decentralized Resource Token) is an ERC-20 compliant token on Ethereum. As a fungible ERC-20 asset, DRTv1 tokens are fully compatible with the Ethereum ecosystem
docs.uniswap.org
ethereum.org
. Its key parameters are:
Name: Ethereum Decentralized Resource Token
Symbol: DRTv1
Contract Address: 0x2c899a490902352aFa33baFb7fe89c9Dd142f9D1 (Ethereum Mainnet)
Decimals: 18
Supply: Infinite – DRTv1 is minted on demand by a backend AI system (no fixed cap)
Utility: A resource-backed token, minted via an AI-driven logic layer. There are no special LP incentive programs or tokenomics besides trading utility.
DRTv1 is “resource-backed” in that the AI controller issues new tokens only after verifying real-world contributions or digital resource proofs. Importantly, the minting logic is entirely open-source and verifiable: all rules for issuance are encoded off-chain in the AI algorithms, eliminating any need to trust a centralized issuer. As an ERC-20, DRTv1 supports standard operations (transfer, approve, etc.) so it can be held in wallets, traded on DEXs, or used in DeFi. Its infinite supply design means no artificial cap will constrain minting – supply expands algorithmically. However, because DRTrade.sol has no additional token rewards for liquidity providers, DRTv1’s minting and use-cases focus purely on its intrinsic utility, not on yield farming.
Wrapped Ether (WETH)
WETH is the standard Wrapped Ether token (ERC-20) on Ethereum, with contract address 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 on mainnet. Wrapped Ether represents ETH in ERC-20 form, allowing native Ether to be used in token contracts and AMMs. In essence, WETH is pegged 1:1 to ETH and can be unwrapped back to ETH at any time
coinmarketcap.com
. This solves Ethereum’s interoperability challenge: ETH itself is not ERC-20, but WETH is. By using WETH, DRTrade.sol ensures traders can swap standard, widely-supported ETH-value tokens. Any user wanting to trade ETH on DRTrade.sol simply wraps it to WETH beforehand. The use of WETH also means the DRTrade.sol contract deals exclusively with ERC-20 transfers for both assets, simplifying compliance and integration
coinmarketcap.com
ethereum.org
.
Smart Contract Architecture
The DRTrade.sol contract (address 0xD0DC7f8935A661010D56A470eA81572a4a84EED4) is deployed on Ethereum Mainnet and implements the core AMM pool for DRTv1 and WETH. It is non-upgradeable, meaning its code is fixed at deployment. The contract exposes standard functions akin to Uniswap V2’s Pair, including:
addLiquidity(amountDRTv1, amountWETH): Allows anyone to deposit DRTv1 and WETH (in equal USD value or token-value ratios) into the pool. Deposit mints liquidity-share tokens to the provider.
removeLiquidity(liquidity): Burns LP shares to withdraw proportional amounts of DRTv1 and WETH from the pool.
swap(inputToken, inputAmount, minOutput): Enables a trader to swap one token for the other. The contract calculates output via the constant-product formula (see next section) and enforces output >= minOutput to protect against excessive slippage.
The contract keeps track of reserves (reserveDRTv1, reserveWETH) which update on each liquidity change or swap. By requiring equal-value deposits, the pool maintains a 50/50 weighted pool (by USD price) and calculates prices purely from the reserves ratio. Technically, DRTrade.sol’s code follows the ERC-20-based DEX pattern: it uses functions like transferFrom and transfer to move tokens, and it emits events so that off-chain systems can observe actions. It takes advantage of Ethereum’s smart contract guarantees: once a swap is submitted, it will execute exactly according to the code or revert, guaranteeing trustless operation
docs.uniswap.org
bcbgroup.com
. (All trades are atomic on-chain transactions; no order book or off-chain matching is needed.) As with Uniswap and other AMMs, the DRTrade.sol pair contract treats DRTv1 and WETH symmetrically. Anyone can become a liquidity provider by depositing both tokens into the pool; they then receive pool (LP) tokens representing their share
docs.uniswap.org
. Those LP tokens are redeemable for the underlying assets plus a share of fees (if any) when burned. The design assumes any trading fees (if applied) accrue to the pool, rewarding LPs proportionally. In practice, DRTrade.sol’s governance can configure fee parameters, but by default it follows the Uniswap V2 convention.
Automated Market Maker Model
DRTrade.sol uses the Constant-Product Automated Market Maker model, defined by the formula: <p style="text-align: center;">x · y = k</p> where x and y are the current reserves of DRTv1 and WETH in the pool, and k is an invariant constant. This means that after any trade, the product of the reserves remains the same (ignoring fees). As a result, if one token’s supply in the pool increases, the other’s must decrease proportionally to keep k fixed
docs.uniswap.org
medium.com
. The Uniswap documentation notes that this “constant product” rule ensures trades can always occur (as long as reserves exist) and dictates the exchange price algorithmically
docs.uniswap.org
. 

Figure: A conceptual diagram of the constant-product AMM. Adding liquidity flattens the price curve and reduces slippage (green area) by expanding reserves under the x·y = k invariant
docs.uniswap.org
【23†L?】. Because of the x·y=k rule, DRTrade.sol does not use an order book. Instead, liquidity pools hold reserves, and any swap is done directly against the pool. For example, if a trader swaps Δx of DRTv1 into the pool, the new DRTv1 reserve becomes x′ = x + Δx. To preserve k, the WETH reserve must move to y′ = k / x′. The trader receives Δy = y – y′ of WETH. This computation ensures exact adherence to the formula
medium.com
. The effect is that each trade changes the token price according to the reserve ratio: depositing more of one token makes that token relatively cheaper (and the other more expensive). Thus, prices emerge naturally from supply and demand on-chain. Notably, this model has a curved price impact: larger trades incur disproportionately higher slippage. Intuitively, small trades cause small changes in the reserve ratio; very large trades (relative to reserves) move far along the x·y=k curve, yielding steeper price impact. As described in the Uniswap overview, the constant-product invariant yields exponentially worse rates for larger trades
docs.uniswap.org
. The medium article on AMMs similarly explains that maintaining k forces one reserve to shrink significantly for large inputs, making price impact grow nonlinearly
medium.com
. In practical terms, DRTrade.sol’s swap function will often be given a minOutput parameter by the frontend: if the price movement exceeds the trader’s tolerance, the transaction reverts, limiting negative slippage. Because the price in the pool can differ from external markets (since DRTv1 has no other direct markets initially), arbitrageurs play an important role. If DRTrade.sol’s implicit DRTv1/WETH price deviates from market expectations, arbitrage trades will quickly move it back in line (buying DRTv1 cheap or selling it expensive on the pool). This mechanism naturally aligns the pool price to the broader market price
docs.uniswap.org
. In sum, the constant-product AMM model makes DRTrade.sol a fully on-chain price discovery mechanism: prices are set by liquidity and trades, with no need for trusted oracles.
Swap Mechanics and Fee Structure
When a user initiates a swap on DRTrade.sol, they interact directly with the pool contract. The user sends one token (say, DRTv1) to the contract, specifying the minimum acceptable output of the other token (WETH). The contract then computes the exact output Δy = y – (k / (x + Δx)), as described above. In pseudo-notation:
solidity
Copy
Edit
function swap(uint amountIn, address tokenIn, address tokenOut, uint minAmountOut) external {
    // Ensure reserves for tokenIn and tokenOut exist
    require((tokenIn==DRTv1 && tokenOut==WETH) || (tokenIn==WETH && tokenOut==DRTv1));
    // Transfer input tokens into the contract
    transferFrom(msg.sender, address(this), amountIn);
    // Calculate output amount per constant-product
    uint newReserveIn = reserveIn + amountIn;
    uint newReserveOut = k / newReserveIn; // k = reserveIn * reserveOut
    uint amountOut = reserveOut - newReserveOut;
    require(amountOut >= minAmountOut, "Slippage limit");
    // Transfer output tokens to user
    transfer(msg.sender, amountOut);
    // Update reserves
    reserveIn = newReserveIn;
    reserveOut = newReserveOut;
}
This illustrates the invariant-based calculation: no matter how much the price moves, the contract mathematically guarantees the new reserves satisfy x'·y' = k. By requiring that the output is ≥ minAmountOut, the contract ensures the trader’s slippage tolerance is respected (otherwise the transaction reverts). In practice, DRTrade.sol may charge a small fee on each trade (e.g. ~0.30% like Uniswap V2) that is added to the reserves, benefiting liquidity providers
docs.uniswap.org
. Even if fees are enabled, the core pricing equation remains the same (except k slightly increases each trade due to fee accrual)
docs.uniswap.org
.
Trustless AI Integration
A distinctive feature of DRTrade.sol is its trustless AI controller. Unlike a traditional DEX where only on-chain code governs everything, DRTrade.sol uses off-chain AI-driven services (named drtradeController.js, drtradeRoute.js, etc.) to monitor and manage certain actions. This AI layer is designed to prevent malicious or destabilizing trades while remaining fully auditable and decentralized in its operation. Key points of this integration include:
Safety Checks: The AI logic pre-screens trades for potentially dangerous conditions. For example, if a trade would consume too much of the pool (low remaining liquidity) or exceed a configured slippage threshold, the controller can block or split the trade. This prevents liquidity-draining attacks or extreme price movements. In effect, it acts like an intelligent router that enforces safe parameters.
Open-Source Logic: All AI decision rules are open and publicly viewable. Anyone can audit drtradeController.js, drtradeRoute.js, and related code on the project’s repository. This transparency ensures that “trustless” means just that – users do not have to trust a hidden authority. Instead, they rely on publicly documented algorithms and Ethereum’s execution guarantees. As one write-up notes, blockchains distribute trust away from any single actor and into code
bcbgroup.com
. DRTrade.sol’s AI is an extension of this principle: trust is in the verifiable algorithm.
Monitoring Liquidity: The controller continuously scans liquidity data on DRTrade.sol and other exchanges. If it detects an imbalance (e.g. suddenly low liquidity on one side of the pair) or a price discrepancy, it can adjust or temporarily restrict trading parameters. For instance, it may signal to the frontend to lower the maximum trade size. By aggregating cross-DEX data, the AI ensures no single trade can easily drain or dump one token without the user’s protection.
Arbitrage and Routing: The drtradeRoute.js service may also function like a smart router, finding optimal trade routes. For users looking to swap DRTv1/WETH, the AI checks if better prices exist on other DEXs or aggregators. If so, it can route parts of the trade accordingly. However, since DRTrade.sol’s focus is the direct pool, the AI ensures any external routing does not violate the constant-product invariant on its own contract.
Trustlessness via Backend: By using a decentralized blockchain for final execution and open-sourcing the AI code, the protocol remains trust-minimized. The backend merely suggests and checks trades; all actual token movements happen on-chain in the DRTrade.sol contract. Even if the AI components fail or go offline, users can still execute trades via smart contract calls (albeit without the AI’s guardrails). Thus, no user funds are ever held or controlled off-chain.
In summary, the trustless AI is a behind-the-scenes layer that enhances security and user protection. It acts like an independent auditor or guard for trade execution. Importantly, it is not a permissioning system – it cannot freeze the contract or steal funds. Instead, it simply enforces pre-agreed safety rules (e.g. maximum slippage, maximum single-transaction size) and transparently signals recommended actions. Users are free to review the AI code and even run their own instance; the network does not rely on any centralized “oracle.” In this way, DRTrade.sol maintains the ethos of decentralization and trust-minimization
docs.uniswap.org
bcbgroup.com
 while leveraging advanced logic to prevent worst-case trading scenarios.
Liquidity, Slippage, and Security
The DRTv1–WETH pool’s liquidity directly determines slippage. Higher liquidity means less price impact for a given trade size; conversely, low liquidity pools suffer high slippage. The constant-product formula inherently ties liquidity to slippage – with more reserves, the x·y=k curve flattens, widening the “low-slippage” region【23†L?-L?】
medium.com
. The embedded diagram above illustrates this: adding liquidity (green arrow) flattens the invariant curve, so small trades move the price only slightly, whereas large trades into a thin pool would move the price sharply
medium.com
. Slippage is the difference between a trade’s expected price and the executed price
coinbase.com
. It arises mainly from low liquidity and rapid market movements. On DRTrade.sol, slippage manifests when a swap changes the reserve ratio significantly. To protect users, the AI layer and frontend tools help set appropriate slippage tolerances. For example, if a trader does not want more than 1% slippage, the transaction will revert if that tolerance is exceeded. Moreover, the trustless AI controller can prevent trades that would cause dangerous slippage by not forwarding them to the contract in the first place. This is especially important because DRTv1 is a new token that may have low initial liquidity. The AI’s job includes “watching” for trades that would drain over, say, 80% of one reserve – such trades would be flagged as liquidity-draining attacks. By refusing to execute or splitting such trades, DRTrade.sol avoids the situation where one malicious actor empties the pool (a concern noted in liquidity-draining attack descriptions
medium.com
). In effect, the combination of automated slippage limits in the contract and the AI’s routing/sizing logic creates a two-tier guardrail system. The on-chain slippage check (minOutput) is immutable and enforces trader-specified limits, while the off-chain AI sets global safety thresholds and monitors cross-pool health. All trades remain atomic on Ethereum; there is no partial execution or external custody. This layered approach yields strong security: it mitigates sandwich attacks or flash loans that exploit tiny pools, without requiring any centralized review. It also aligns with broader blockchain security principles – as one blockchain source notes, a “trustless” system like Ethereum relies on verifiable code rather than trust in people
bcbgroup.com
docs.uniswap.org
.
Conclusion
DRTrade.sol is a fully on-chain DEX protocol tailored for swapping an AI-minted token (DRTv1) with WETH on Ethereum. By leveraging the well-known constant-product AMM model
docs.uniswap.org
medium.com
, it provides simple, transparent pricing and continuous liquidity as long as reserves exist. Its unique addition is a trustless AI controller that governs minting and trading logic off-chain. This ensures that token issuance and swaps are conducted safely – preventing excessive slippage or liquidity drains – without sacrificing decentralization. All core rules are open-source and enforced either by smart contract code or verifiable algorithms, embodying the trust-minimized ethos of DeFi
docs.uniswap.org
bcbgroup.com
. The DRTrade.sol contract, deployed at 0xD0DC...EED4, alongside the DRTv1 (0x2c89...f9D1) and WETH (0xC02a...56Cc2) token contracts, form the backbone of this DEX. They operate on Ethereum’s network, relying on ERC-20 interoperability
ethereum.org
nansen.ai
. Together with community liquidity providers (even without extra incentives), the protocol supports open trading of resource-backed assets, bolstered by smart AI oversight. In doing so, DRTrade.sol aims to provide a robust, transparent, and extensible platform for decentralized token swaps on Ethereum. Sources: DRTrade.sol’s design draws on standard AMM theory and Ethereum conventions
docs.uniswap.org
docs.uniswap.org
. Definitions and concepts (e.g. slippage, wrapped tokens, trustlessness) are corroborated by industry references
coinbase.com
coinmarketcap.com
bcbgroup.com
. The constant-product mechanism is documented in Uniswap’s protocol overview and AMM guides
docs.uniswap.org
medium.com
, ensuring our formulas align with established DEX practices.
